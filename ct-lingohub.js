// Generated by CoffeeScript 1.9.3
(function() {
  var ArgumentParser, _, linghub, login, logout, options, packagejson, parser, projects, resultPrinter, subparsers;

  linghub = require("./lingohub");

  packagejson = require("./package.json");

  ArgumentParser = require('argparse').ArgumentParser;

  _ = require('underscore');

  parser = new ArgumentParser({
    version: packagejson.version,
    addHelp: true,
    description: packagejson.description
  });

  subparsers = parser.addSubparsers({
    title: "Commands to be used with " + packagejson.name,
    dest: 'command'
  });

  login = subparsers.addParser('login', {
    addHelp: true,
    description: "Login to lingohub and stores login token in ~/.ct-import.auth file"
  });

  login.addArgument(['-t', '--token'], {
    action: 'store',
    required: true,
    help: 'token to be used for accessing Lingogub API'
  });

  login.addArgument(['-a', '--account'], {
    action: 'store',
    required: true,
    help: 'account name to be used together with TOKEN'
  });

  logout = subparsers.addParser('logout', {
    addHelp: true,
    description: "Logout from lingohub. It removes login token from ~/.ct-import.auth file"
  });

  projects = subparsers.addParser('projects', {
    addHelp: true,
    description: "List all projects registered in the system"
  });

  projects.addArgument(['-t', '--token'], {
    action: 'store',
    required: false,
    help: 'token to be used for accessing Lingogub API'
  });

  projects.addArgument(['-a', '--account'], {
    action: 'store',
    required: false,
    help: 'account name to be used together with TOKEN'
  });

  projects.addArgument(['-j', '--json'], {
    action: 'storeTrue',
    required: false,
    help: 'Print results in json format only'
  });

  projects.addArgument(['-n', '--no-header'], {
    action: 'storeTrue',
    required: false,
    help: 'Do not print any headers for the results - just data'
  });

  projects = subparsers.addParser('project-info', {
    addHelp: true,
    description: "Get detailed inforamtion about a particular project"
  });

  projects.addArgument(['-t', '--token'], {
    action: 'store',
    required: false,
    help: 'token to be used for accessing Lingogub API'
  });

  projects.addArgument(['-a', '--account'], {
    action: 'store',
    required: false,
    help: 'account name to be used together with TOKEN'
  });

  projects.addArgument(['-j', '--json'], {
    action: 'storeTrue',
    required: false,
    help: 'Print results in json format only'
  });

  projects.addArgument(['-p', '--project'], {
    action: 'store',
    required: true,
    help: 'project name to displayed information about'
  });

  projects.addArgument(['-n', '--no-header'], {
    action: 'storeTrue',
    required: false,
    help: 'Do not print any headers for the results - just data'
  });

  projects = subparsers.addParser('locals', {
    addHelp: true,
    description: "List all destination languages defined in a particular project"
  });

  projects.addArgument(['-t', '--token'], {
    action: 'store',
    required: false,
    help: 'token to be used for accessing Lingogub API'
  });

  projects.addArgument(['-a', '--account'], {
    action: 'store',
    required: false,
    help: 'account name to be used together with TOKEN'
  });

  projects.addArgument(['-j', '--json'], {
    action: 'storeTrue',
    required: false,
    help: 'Print results in json format only'
  });

  projects.addArgument(['-n', '--no-header'], {
    action: 'storeTrue',
    required: false,
    dest: 'noheader',
    help: 'Do not print any headers for the results - just data'
  });

  projects.addArgument(['-p', '--project'], {
    action: 'store',
    required: true,
    help: 'project name to displayed information about'
  });

  projects = subparsers.addParser('download', {
    addHelp: true,
    description: "get a translation file for a project"
  });

  projects.addArgument(['-t', '--token'], {
    action: 'store',
    required: false,
    help: 'token to be used for accessing Lingogub API'
  });

  projects.addArgument(['-a', '--account'], {
    action: 'store',
    required: false,
    help: 'account name to be used together with TOKEN'
  });

  projects.addArgument(['-j', '--json'], {
    action: 'storeTrue',
    required: false,
    help: 'Print results in json format only'
  });

  projects.addArgument(['-n', '--no-header'], {
    action: 'storeTrue',
    required: false,
    dest: 'noheader',
    help: 'Do not print any headers for the results - just data'
  });

  projects.addArgument(['-p', '--project'], {
    action: 'store',
    required: true,
    help: 'project name to displayed information about'
  });

  projects.addArgument(['-l', '--lang'], {
    action: 'store',
    required: true,
    help: 'language code for the expected translation i.e.:es or ar-AE'
  });

  projects.addArgument(['-f', '--path'], {
    action: 'store',
    required: false,
    dest: 'path',
    help: 'save translation file under to path. If not provided default it will save to ./i18n/#{lang}.i18n.json  '
  });

  projects = subparsers.addParser('upload', {
    addHelp: true,
    description: "upload a source file to lingohub"
  });

  projects.addArgument(['-t', '--token'], {
    action: 'store',
    required: false,
    help: 'token to be used for accessing Lingogub API'
  });

  projects.addArgument(['-a', '--account'], {
    action: 'store',
    required: false,
    help: 'account name to be used together with TOKEN'
  });

  projects.addArgument(['-j', '--json'], {
    action: 'storeTrue',
    required: false,
    help: 'Print results in json format only'
  });

  projects.addArgument(['-n', '--no-header'], {
    action: 'storeTrue',
    required: false,
    dest: 'noheader',
    help: 'Do not print any headers for the results - just data'
  });

  projects.addArgument(['-p', '--project'], {
    action: 'store',
    required: true,
    help: 'project name to displayed information about'
  });

  projects.addArgument(['-l', '--lang'], {
    action: 'store',
    required: true,
    help: 'language code for the expected translation i.e.:es or ar-AE'
  });

  projects.addArgument(['-f', '--path'], {
    action: 'store',
    required: false,
    dest: 'path',
    help: 'save translation file under to path. If not provided default it will save to ./i18n/#{lang}.i18n.json  '
  });

  projects = subparsers.addParser('pull', {
    addHelp: true,
    description: "pull entire project translation status"
  });

  projects.addArgument(['-t', '--token'], {
    action: 'store',
    required: false,
    help: 'token to be used for accessing Lingogub API'
  });

  projects.addArgument(['-a', '--account'], {
    action: 'store',
    required: false,
    help: 'account name to be used together with TOKEN'
  });

  projects.addArgument(['-j', '--json'], {
    action: 'storeTrue',
    required: false,
    help: 'Print results in json format only'
  });

  projects.addArgument(['-n', '--no-header'], {
    action: 'storeTrue',
    required: false,
    dest: 'noheader',
    help: 'Do not print any headers for the results - just data'
  });

  projects.addArgument(['-p', '--project'], {
    action: 'store',
    required: true,
    help: 'project name to displayed information about'
  });

  projects.addArgument(['-f', '--path'], {
    action: 'store',
    required: false,
    dest: 'path',
    help: 'save translation file under to path. If not provided default it will save to ./i18n/#{lang}.i18n.json  '
  });

  projects = subparsers.addParser('push', {
    addHelp: true,
    description: "push all translations files into LinguHubs system."
  });

  projects.addArgument(['-t', '--token'], {
    action: 'store',
    required: false,
    help: 'token to be used for accessing Lingogub API'
  });

  projects.addArgument(['-a', '--account'], {
    action: 'store',
    required: false,
    help: 'account name to be used together with TOKEN'
  });

  projects.addArgument(['-j', '--json'], {
    action: 'storeTrue',
    required: false,
    help: 'Print results in json format only'
  });

  projects.addArgument(['-n', '--no-header'], {
    action: 'storeTrue',
    required: false,
    dest: 'noheader',
    help: 'Do not print any headers for the results - just data'
  });

  projects.addArgument(['-p', '--project'], {
    action: 'store',
    required: true,
    help: 'project name to displayed information about'
  });

  projects.addArgument(['-f', '--path'], {
    action: 'store',
    required: false,
    dest: 'path',
    help: 'save translation file under to path. If not provided default it will save to ./i18n/#{lang}.i18n.json  '
  });

  resultPrinter = function(err, msg, options, data) {
    if (err) {
      console.error("Error occurred");
      return console.error(err);
    } else {
      if (options.json) {
        return console.log(JSON.stringify(data, null, 4));
      } else {
        if (!options.noheader) {
          console.log(msg);
          console.log("");
        }
        if (!_.isArray(data)) {
          return console.log(data);
        } else {
          return data.forEach(function(element) {
            return console.log(element);
          });
        }
      }
    }
  };

  options = parser.parseArgs();

  switch (options.command) {
    case "login":
      linghub.login(options.account, options.token, function(err) {
        return resultPrinter(err, "Login successfuly. Your credentials are saved in ~/.ct-import.auth", options);
      });
      break;
    case "logout":
      linghub.logout(function(err) {
        return resultPrinter(err, "Logged out successfuly", options);
      });
      break;
    case "projects":
      linghub.projects(options, function(err, data) {
        return resultPrinter(err, "List of projects:", options, data);
      });
      break;
    case "project-info":
      linghub.getProject(options.project, options, function(err, data) {
        return resultPrinter(err, "Detailed inforation about project " + options.project + ":", options, data);
      });
      break;
    case "locals":
      linghub.getProjectLocales(options.project, options, function(err, data) {
        return resultPrinter(err, "Locales for project " + options.project + ":", options, data);
      });
      break;
    case "download":
      linghub.getTranslationFile(options.project, options.lang, options.path, options, function(err, path) {
        return resultPrinter(err, "Translation saved to  " + path + ":", options, path);
      });
      break;
    case "upload":
      linghub.uploadSrcFile(options.project, options.lang, options.path, options, function(err, path) {
        return resultPrinter(err, "Translation saved to  " + path + ":", options, path);
      });
      break;
    case "pull":
      linghub.pullAllTransaltions(options.project, options.path, options, function(err, langs) {
        return resultPrinter(err, "Successfully pulled translations for project " + options.project + ":", options, langs);
      });
      break;
    case "push":
      linghub.pushAllFiles(options.project, options.path, options, function(err, langs) {
        return resultPrinter(err, "Successfully pushed all local files to lingohub " + options.project + ":", options, langs);
      });
      break;
    default:
      console.log("Unknown command " + options.command + " ");
  }

}).call(this);

//# sourceMappingURL=ct-lingohub.js.map
