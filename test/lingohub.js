// Generated by CoffeeScript 1.9.3
(function() {
  var assert, auth_token_path, fs, lingohub, mockfs, should;

  assert = require('assert');

  lingohub = require('../lingohub');

  should = require('should');

  mockfs = require('mock-fs');

  fs = require('fs');

  auth_token_path = lingohub.auth_token_path;

  describe("Mocking Fs tests", function() {
    return describe('read operations', function() {
      beforeEach(function() {
        return mockfs({
          '/etc/passwd': "alamakota"
        });
      });
      afterEach(function() {
        return mockfs.restore();
      });
      return it("should be able to get content of fake file", function(done) {
        return lingohub.testingFs("/etc/passwd", function(err, data) {
          should.not.exist(err);
          data.should.equal("alamakota");
          return done();
        });
      });
    });
  });

  describe('Basic operations on lingohub', function() {
    describe('login operation', function() {
      afterEach(function() {
        return mockfs.restore();
      });
      it("should exist login operation ", function(done) {
        lingohub.login.should.exist;
        return done();
      });
      it("should be able to login when there is no file auth_file ", function(done) {
        mockfs({});
        return lingohub.login("accountYY", "tokenXX", function(err, data) {
          should.not.exist(err);
          return fs.readFile(auth_token_path, {
            encoding: "utf-8"
          }, function(err, data) {
            should.not.exist(err);
            data = JSON.parse(data);
            data.should.deepEqual({
              "account": "accountYY",
              "token": "tokenXX"
            });
            return done();
          });
        });
      });
      return it("should be able to login when there is already file with auth_token", function(done) {
        var obj;
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify({
            "account": "myaccount",
            "token": "mytoken"
          }),
          obj
        ));
        return lingohub.login("accountYY", "tokenXX", function(err, data) {
          should.not.exist(err);
          return fs.readFile(auth_token_path, {
            encoding: "utf-8"
          }, function(err, data) {
            should.not.exist(err);
            data = JSON.parse(data);
            data.should.deepEqual({
              "account": "accountYY",
              "token": "tokenXX"
            });
            return done();
          });
        });
      });
    });
    describe('logout operation', function() {
      afterEach(function() {
        return mockfs.restore();
      });
      it("should exist logout operation ", function(done) {
        lingohub.logout.should.exist;
        return done();
      });
      it("should be able to logout when there is no file auth_file ", function(done) {
        mockfs({});
        return lingohub.logout(function(err) {
          should.not.exist(err);
          return fs.readFile(auth_token_path, {
            encoding: "utf-8"
          }, function(err, data) {
            err.code.should.equal("ENOENT");
            return done();
          });
        });
      });
      return it("should be able to logout when there is already the auth_file ", function(done) {
        var obj;
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify({
            "account": "myaccount",
            "token": "mytoken"
          }),
          obj
        ));
        return lingohub.logout(function(err) {
          should.not.exist(err);
          return fs.readFile(auth_token_path, {
            encoding: "utf-8"
          }, function(err, data) {
            err.code.should.equal("ENOENT");
            return done();
          });
        });
      });
    });
    describe('getLoginData operation', function() {
      afterEach(function() {
        return mockfs.restore();
      });
      it("should exist getLoginData operation ", function(done) {
        lingohub.getLoginData.should.exist;
        return done();
      });
      it("should generate error when there is no login data", function(done) {
        mockfs({});
        return lingohub.getLoginData(function(err, authObj) {
          err.code.should.equal("NoAuthData");
          should.not.exists(authObj);
          return done();
        });
      });
      it("should generate error when there non-parsable data in auth_token_file", function(done) {
        var obj;
        mockfs((
          obj = {},
          obj["" + auth_token_path] = "alamakota",
          obj
        ));
        return lingohub.getLoginData(function(err, authObj) {
          err.code.should.equal("ParseAuthFile");
          should.not.exists(authObj);
          return done();
        });
      });
      it("should provide data from auth_token file when there is no options provided", function(done) {
        var obj, sampleAuth;
        sampleAuth = {
          account: "myaccount",
          token: "mytoken"
        };
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify(sampleAuth),
          obj
        ));
        return lingohub.getLoginData(function(err, authObj) {
          should.not.exists(err);
          authObj.account.should.equal(sampleAuth.account);
          authObj.token.should.equal(sampleAuth.token);
          return done();
        });
      });
      it("should prefer options auth records than file", function(done) {
        var obj, option, sampleAuth;
        sampleAuth = {
          account: "myaccount",
          token: "mytoken"
        };
        option = {
          account: "myaccountOption",
          token: "mytokenOption"
        };
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify(sampleAuth),
          obj
        ));
        return lingohub.getLoginData(option, function(err, authObj) {
          should.not.exists(err);
          authObj.account.should.equal(option.account);
          authObj.token.should.equal(option.token);
          return done();
        });
      });
      it("should prefer option token than file", function(done) {
        var obj, option, sampleAuth;
        sampleAuth = {
          account: "myaccount",
          token: "mytoken"
        };
        option = {
          token: "mytokenOption"
        };
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify(sampleAuth),
          obj
        ));
        return lingohub.getLoginData(option, function(err, authObj) {
          should.not.exists(err);
          authObj.account.should.equal(sampleAuth.account);
          authObj.token.should.equal(option.token);
          return done();
        });
      });
      return it("should prefer option account than file", function(done) {
        var obj, option, sampleAuth;
        sampleAuth = {
          account: "myaccount",
          token: "mytoken"
        };
        option = {
          account: "myaccountOption"
        };
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify(sampleAuth),
          obj
        ));
        return lingohub.getLoginData(option, function(err, authObj) {
          should.not.exists(err);
          authObj.account.should.equal(option.account);
          authObj.token.should.equal(sampleAuth.token);
          return done();
        });
      });
    });
    return describe('projects operation', function() {
      afterEach(function() {
        return mockfs.restore();
      });
      return it("should exist projects operation ", function(done) {
        lingohub.projects.should.exist;
        return done();
      });
    });
  });

}).call(this);

//# sourceMappingURL=lingohub.js.map
