// Generated by CoffeeScript 1.9.3
(function() {
  var assert, auth_token_path, fs, lingohub, mockfs, path, rewire, should;

  assert = require('assert');

  should = require('should');

  mockfs = require('mock-fs');

  fs = require('fs');

  rewire = require('rewire');

  path = require('path');

  lingohub = rewire('../lingohub');

  auth_token_path = lingohub.auth_token_path;

  describe('Basic operations on lingohub', function() {
    describe('login operation', function() {
      beforeEach(function() {
        var obj;
        return mockfs((
          obj = {},
          obj["" + (path.dirname(auth_token_path))] = {},
          obj
        ));
      });
      afterEach(function() {
        return mockfs.restore();
      });
      it("should exist login operation ", function(done) {
        lingohub.login.should.exist;
        return done();
      });
      it("should be able to login when there is no file auth_file ", function(done) {
        mockfs({});
        return lingohub.login("accountYY", "tokenXX", function(err, data) {
          should.not.exist(err);
          return fs.readFile(auth_token_path, {
            encoding: "utf-8"
          }, function(err, data) {
            should.not.exist(err);
            data = JSON.parse(data);
            data.should.deepEqual({
              "account": "accountYY",
              "token": "tokenXX"
            });
            return done();
          });
        });
      });
      return it("should be able to login when there is already file with auth_token", function(done) {
        var obj;
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify({
            "account": "myaccount",
            "token": "mytoken"
          }),
          obj
        ));
        return lingohub.login("accountYY", "tokenXX", function(err, data) {
          should.not.exist(err);
          return fs.readFile(auth_token_path, {
            encoding: "utf-8"
          }, function(err, data) {
            should.not.exist(err);
            data = JSON.parse(data);
            data.should.deepEqual({
              "account": "accountYY",
              "token": "tokenXX"
            });
            return done();
          });
        });
      });
    });
    describe('logout operation', function() {
      beforeEach(function() {
        var obj;
        return mockfs((
          obj = {},
          obj["" + (path.dirname(auth_token_path))] = {},
          obj
        ));
      });
      afterEach(function() {
        return mockfs.restore();
      });
      it("should exist logout operation ", function(done) {
        lingohub.logout.should.exist;
        return done();
      });
      it("should be able to logout when there is no file auth_file ", function(done) {
        mockfs({});
        return lingohub.logout(function(err) {
          should.not.exist(err);
          return fs.readFile(auth_token_path, {
            encoding: "utf-8"
          }, function(err, data) {
            err.code.should.equal("ENOENT");
            return done();
          });
        });
      });
      return it("should be able to logout when there is already the auth_file ", function(done) {
        var obj;
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify({
            "account": "myaccount",
            "token": "mytoken"
          }),
          obj
        ));
        return lingohub.logout(function(err) {
          should.not.exist(err);
          return fs.readFile(auth_token_path, {
            encoding: "utf-8"
          }, function(err, data) {
            err.code.should.equal("ENOENT");
            return done();
          });
        });
      });
    });
    describe('getLoginData operation', function() {
      beforeEach(function() {
        var obj;
        return mockfs((
          obj = {},
          obj["" + (path.dirname(auth_token_path))] = {},
          obj
        ));
      });
      afterEach(function() {
        return mockfs.restore();
      });
      it("should exist getLoginData operation ", function(done) {
        lingohub.getLoginData.should.exist;
        return done();
      });
      it("should generate error when there is no login data", function(done) {
        mockfs({});
        return lingohub.getLoginData(function(err, authObj) {
          err.code.should.equal("NoAuthData");
          should.not.exists(authObj);
          return done();
        });
      });
      it("should generate error when there non-parsable data in auth_token_file", function(done) {
        var obj;
        mockfs((
          obj = {},
          obj["" + auth_token_path] = "alamakota",
          obj
        ));
        return lingohub.getLoginData(function(err, authObj) {
          err.code.should.equal("ParseAuthFile");
          should.not.exists(authObj);
          return done();
        });
      });
      it("should provide data from auth_token file when there is no options provided", function(done) {
        var obj, sampleAuth;
        sampleAuth = {
          account: "myaccount",
          token: "mytoken"
        };
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify(sampleAuth),
          obj
        ));
        return lingohub.getLoginData(function(err, authObj) {
          should.not.exists(err);
          authObj.account.should.equal(sampleAuth.account);
          authObj.token.should.equal(sampleAuth.token);
          return done();
        });
      });
      it("should prefer options auth records than file", function(done) {
        var obj, option, sampleAuth;
        sampleAuth = {
          account: "myaccount",
          token: "mytoken"
        };
        option = {
          account: "myaccountOption",
          token: "mytokenOption"
        };
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify(sampleAuth),
          obj
        ));
        return lingohub.getLoginData(option, function(err, authObj) {
          should.not.exists(err);
          authObj.account.should.equal(option.account);
          authObj.token.should.equal(option.token);
          return done();
        });
      });
      it("should prefer option token than file", function(done) {
        var obj, option, sampleAuth;
        sampleAuth = {
          account: "myaccount",
          token: "mytoken"
        };
        option = {
          token: "mytokenOption"
        };
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify(sampleAuth),
          obj
        ));
        return lingohub.getLoginData(option, function(err, authObj) {
          should.not.exists(err);
          authObj.account.should.equal(sampleAuth.account);
          authObj.token.should.equal(option.token);
          return done();
        });
      });
      return it("should prefer option account than file", function(done) {
        var obj, option, sampleAuth;
        sampleAuth = {
          account: "myaccount",
          token: "mytoken"
        };
        option = {
          account: "myaccountOption"
        };
        mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify(sampleAuth),
          obj
        ));
        return lingohub.getLoginData(option, function(err, authObj) {
          should.not.exists(err);
          authObj.account.should.equal(option.account);
          authObj.token.should.equal(sampleAuth.token);
          return done();
        });
      });
    });
    describe('projects operation', function() {
      var sampleAuth;
      sampleAuth = {
        account: "myaccount",
        token: "mytoken"
      };
      beforeEach(function() {
        var obj;
        return mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify(sampleAuth),
          obj
        ));
      });
      afterEach(function() {
        return mockfs.restore();
      });
      it("should project return error on received error form API server ", function(done) {
        var clientMock;
        clientMock = {
          get: function(address, args, callback) {
            return callback(null, {
              statusCode: 804
            });
          }
        };
        lingohub.__set__("client", clientMock);
        return lingohub.projects(function(err, data) {
          should.exist(err);
          err.code.should.equal(804);
          return done();
        });
      });
      return it("should pass token to projects ", function(done) {
        var clientMock;
        clientMock = {
          get: function(address, args, callback) {
            should.exist(args);
            args.parameters.auth_token.should.equal(sampleAuth.token);
            return done();
          }
        };
        lingohub.__set__("client", clientMock);
        return lingohub.projects(function(err, data) {});
      });
    });
    describe('saveTranslationToFile', function() {
      var data;
      data = new Buffer('this is a test');
      beforeEach(function() {
        return mockfs({});
      });
      afterEach(function() {
        return mockfs.restore();
      });
      it("should exist saveTranslationToFile operation ", function(done) {
        lingohub.saveTranslationToFile.should.exist;
        return done();
      });
      it("should be able to save to file data if path is provided ", function(done) {
        var lang, saveToPath;
        mockfs({});
        saveToPath = "/d1/d2/d3/test.i18n.json";
        lang = "es";
        return lingohub.saveTranslationToFile(saveToPath, data, lang, function(err, path) {
          should.not.exist(err);
          path.should.equal(saveToPath);
          return fs.readFile(path, function(err, rdata) {
            should.not.exists(err);
            rdata.should.deepEqual(data);
            return done();
          });
        });
      });
      it("should be able to save to file data if path is provided and the destination file already exists", function(done) {
        var lang, obj, saveToPath;
        saveToPath = "/d1/d2/d3/test.i18n.json";
        mockfs((
          obj = {},
          obj["" + saveToPath] = "existing data",
          obj
        ));
        lang = "es";
        return lingohub.saveTranslationToFile(saveToPath, data, lang, function(err, path) {
          should.not.exist(err);
          path.should.equal(saveToPath);
          return fs.readFile(path, function(err, rdata) {
            should.not.exists(err);
            rdata.should.deepEqual(data);
            return done();
          });
        });
      });
      return it("should be able to save to file data to default path ", function(done) {
        var lang;
        mockfs({});
        lang = "es";
        return lingohub.saveTranslationToFile(null, data, lang, function(err, path) {
          should.not.exist(err);
          path.should.equal("i18n/" + lang + ".i18n.json");
          return fs.readFile(path, function(err, rdata) {
            should.not.exists(err);
            rdata.should.deepEqual(data);
            return done();
          });
        });
      });
    });
    describe('getTranslationFile operation', function() {
      var lang, project, sampleAuth, sampleData, saveTo;
      sampleAuth = {
        account: "myaccount",
        token: "mytoken"
      };
      sampleData = new Buffer('this is a test');
      project = "testproject";
      lang = "es";
      saveTo = "/mypath/i18.es.json";
      beforeEach(function() {
        var obj;
        return mockfs((
          obj = {},
          obj["" + auth_token_path] = JSON.stringify(sampleAuth),
          obj
        ));
      });
      afterEach(function() {
        return mockfs.restore();
      });
      it("should getTranslationFile return error on received error form API server ", function(done) {
        var clientMock;
        clientMock = {
          get: function(address, args, callback) {
            return callback(null, {
              statusCode: 804
            });
          }
        };
        lingohub.__set__("client", clientMock);
        return lingohub.getTranslationFile(project, lang, saveTo, function(err, rpath) {
          should.exist(err);
          err.code.should.equal(804);
          return done();
        });
      });
      return it("should save received data under right path", function(done) {
        var clientMock;
        clientMock = {
          get: function(address, args, callback) {
            return callback(sampleData, {
              statusCode: 200
            });
          }
        };
        lingohub.__set__("client", clientMock);
        return lingohub.getTranslationFile(project, lang, saveTo, function(err, rpath) {
          should.not.exist(err);
          saveTo.should.equal(rpath);
          return fs.readFile(rpath, function(err, rdata) {
            should.not.exists(err);
            rdata.should.deepEqual(sampleData);
            return done();
          });
        });
      });
    });
    return describe('convertToPath tool lib', function() {
      beforeEach(function() {
        return mockfs({});
      });
      afterEach(function() {
        return mockfs.restore();
      });
      it("should be there a function convertToPath", function(done) {
        lingohub.convertToPath.should.exist;
        return done();
      });
      it("should return final path from original null", function(done) {
        return lingohub.convertToPath(null, "es", function(err, rpath) {
          should.not.exist(err);
          rpath.should.equal("i18n/es.i18n.json");
          return done();
        });
      });
      it("should return final path if the original path is an existing directory", function(done) {
        var obj, saveToPath;
        saveToPath = "/test/i18n";
        mockfs((
          obj = {},
          obj["" + saveToPath] = {},
          obj
        ));
        return lingohub.convertToPath(saveToPath, "es", function(err, rpath) {
          should.not.exist(err);
          rpath.should.equal("/test/i18n/es.i18n.json");
          return done();
        });
      });
      it("should return final path if the original path is non-existing file", function(done) {
        var saveToPath;
        saveToPath = "/test/i18n.json";
        return lingohub.convertToPath(saveToPath, "es", function(err, rpath) {
          should.not.exist(err);
          rpath.should.equal(saveToPath);
          return done();
        });
      });
      it("should return final path if the original path is already existing file", function(done) {
        var obj, saveToPath;
        saveToPath = "/test/i18n.json";
        mockfs((
          obj = {},
          obj["" + saveToPath] = "Existing content",
          obj
        ));
        return lingohub.convertToPath(saveToPath, "es", function(err, rpath) {
          should.not.exist(err);
          rpath.should.equal(saveToPath);
          return done();
        });
      });
      it("should prepare missing direcotries on the path", function(done) {
        var saveToPath;
        saveToPath = "/dir1/dir2/dir3/test/i18n.json";
        return lingohub.convertToPath(saveToPath, "es", function(err, rpath) {
          should.not.exist(err);
          rpath.should.equal(saveToPath);
          return fs.stat("/dir1/dir2/dir3/test", function(err, stats) {
            should.not.exist(err);
            stats.isDirectory().should.equal(true);
            return done();
          });
        });
      });
      return it("should return error if it's not possible to create dir", function(done) {
        var saveToPath;
        saveToPath = "/dir1/dir2/dir3/test/i18n.json";
        mockfs({
          "/dir1/dir2": "Existing content"
        });
        return lingohub.convertToPath(saveToPath, "es", function(err, rpath) {
          should.exist(err);
          return done();
        });
      });
    });
  });

}).call(this);

//# sourceMappingURL=lingohub.test.js.map
