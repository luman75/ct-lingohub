#!/usr/bin/env coffee
linghub = require "./lingohub"
packagejson = require "./package.json"
ArgumentParser = require('argparse').ArgumentParser
_ = require 'underscore'


parser = new ArgumentParser({ version: packagejson.version, addHelp: true, description: packagejson.description })
subparsers = parser.addSubparsers( {title: "Commands to be used with #{packagejson.name}", dest: 'command'} )

login = subparsers.addParser('login',           { addHelp: true, description: "Login to lingohub and stores login token in ~/.ct-import.auth file" })
login.addArgument( ['-t', '--token'],           { action: 'store', required: true, help: 'token to be used for accessing Lingogub API' } )
login.addArgument( ['-a', '--account'],         { action: 'store', required: true, help: 'account name to be used together with TOKEN' } )

logout = subparsers.addParser('logout',         { addHelp: true, description: "Logout from lingohub. It removes login token from ~/.ct-import.auth file" })

projects = subparsers.addParser('projects',     { addHelp: true, description: "List all projects registered in the system" })
projects.addArgument( ['-t', '--token'],        { action: 'store', required: false, help: 'token to be used for accessing Lingogub API' } )
projects.addArgument( ['-a', '--account'],      { action: 'store', required: false, help: 'account name to be used together with TOKEN' } )
projects.addArgument( ['-j', '--json'],         { action: 'storeTrue', required: false, help: 'Print results in json format only' } )
projects.addArgument( ['-n', '--no-header'],    { action: 'storeTrue', required: false, help: 'Do not print any headers for the results - just data' } )

projects = subparsers.addParser('project-info', { addHelp: true, description: "Get detailed inforamtion about a particular project" })
projects.addArgument( ['-t', '--token'],        { action: 'store', required: false, help: 'token to be used for accessing Lingogub API' } )
projects.addArgument( ['-a', '--account'],      { action: 'store', required: false, help: 'account name to be used together with TOKEN' } )
projects.addArgument( ['-j', '--json'],         { action: 'storeTrue', required: false, help: 'Print results in json format only' } )
projects.addArgument( ['-p', '--project'],      { action: 'store', required: true, help: 'project name to displayed information about' } )
projects.addArgument( ['-n', '--no-header'],    { action: 'storeTrue', required: false, help: 'Do not print any headers for the results - just data' } )

projects = subparsers.addParser('locals',       { addHelp: true, description: "List all destination languages defined in a particular project" })
projects.addArgument( ['-t', '--token'],        { action: 'store', required: false, help: 'token to be used for accessing Lingogub API' } )
projects.addArgument( ['-a', '--account'],      { action: 'store', required: false, help: 'account name to be used together with TOKEN' } )
projects.addArgument( ['-j', '--json'],         { action: 'storeTrue', required: false, help: 'Print results in json format only' } )
projects.addArgument( ['-n', '--no-header'],    { action: 'storeTrue', required: false, dest:'noheader', help: 'Do not print any headers for the results - just data' } )
projects.addArgument( ['-p', '--project'],      { action: 'store', required: true, help: 'project name to displayed information about' } )


projects = subparsers.addParser('download',     { addHelp: true, description: "get a translation file for a project" })
projects.addArgument( ['-t', '--token'],        { action: 'store', required: false, help: 'token to be used for accessing Lingogub API' } )
projects.addArgument( ['-a', '--account'],      { action: 'store', required: false, help: 'account name to be used together with TOKEN' } )
projects.addArgument( ['-j', '--json'],         { action: 'storeTrue', required: false, help: 'Print results in json format only' } )
projects.addArgument( ['-n', '--no-header'],    { action: 'storeTrue', required: false, dest:'noheader', help: 'Do not print any headers for the results - just data' } )
projects.addArgument( ['-p', '--project'],      { action: 'store', required: true, help: 'project name to displayed information about' } )
projects.addArgument( ['-l', '--lang'],         { action: 'store', required: true, help: 'language code for the expected translation i.e.:es or ar-AE' } )
projects.addArgument( ['-f', '--path'],         { action: 'store', required: false,  dest:'path', help:'save translation file under to path. If not provided default it will save to ./i18n/#{lang}.i18n.json  ' } )

projects = subparsers.addParser('upload',       { addHelp: true, description: "upload a source file to lingohub" })
projects.addArgument( ['-t', '--token'],        { action: 'store', required: false, help: 'token to be used for accessing Lingogub API' } )
projects.addArgument( ['-a', '--account'],      { action: 'store', required: false, help: 'account name to be used together with TOKEN' } )
projects.addArgument( ['-j', '--json'],         { action: 'storeTrue', required: false, help: 'Print results in json format only' } )
projects.addArgument( ['-n', '--no-header'],    { action: 'storeTrue', required: false, dest:'noheader', help: 'Do not print any headers for the results - just data' } )
projects.addArgument( ['-p', '--project'],      { action: 'store', required: true, help: 'project name to displayed information about' } )
projects.addArgument( ['-l', '--lang'],         { action: 'store', required: true, help: 'language code for the expected translation i.e.:es or ar-AE' } )
projects.addArgument( ['-f', '--path'],         { action: 'store', required: false, dest:'path', help: 'save translation file under to path. If not provided default it will save to ./i18n/#{lang}.i18n.json  ' } )

projects = subparsers.addParser('pull',         { addHelp: true, description: "pull entire project translation status" })
projects.addArgument( ['-t', '--token'],        { action: 'store', required: false, help: 'token to be used for accessing Lingogub API' } )
projects.addArgument( ['-a', '--account'],      { action: 'store', required: false, help: 'account name to be used together with TOKEN' } )
projects.addArgument( ['-j', '--json'],         { action: 'storeTrue', required: false, help: 'Print results in json format only' } )
projects.addArgument( ['-n', '--no-header'],    { action: 'storeTrue', required: false, dest:'noheader', help: 'Do not print any headers for the results - just data' } )
projects.addArgument( ['-p', '--project'],      { action: 'store', required: true, help: 'project name to displayed information about' } )
projects.addArgument( ['-f', '--path'],         { action: 'store', required: false, dest:'path', help: 'save translation file under to path. If not provided default it will save to ./i18n/#{lang}.i18n.json  ' } )

projects = subparsers.addParser('push',         { addHelp: true, description: "pull entire project translation status" })
projects.addArgument( ['-t', '--token'],        { action: 'store', required: false, help: 'token to be used for accessing Lingogub API' } )
projects.addArgument( ['-a', '--account'],      { action: 'store', required: false, help: 'account name to be used together with TOKEN' } )
projects.addArgument( ['-j', '--json'],         { action: 'storeTrue', required: false, help: 'Print results in json format only' } )
projects.addArgument( ['-n', '--no-header'],    { action: 'storeTrue', required: false, dest:'noheader', help: 'Do not print any headers for the results - just data' } )
projects.addArgument( ['-p', '--project'],      { action: 'store', required: true, help: 'project name to displayed information about' } )
projects.addArgument( ['-f', '--path'],         { action: 'store', required: false, dest:'path', help: 'save translation file under to path. If not provided default it will save to ./i18n/#{lang}.i18n.json  ' } )


resultPrinter = (err, msg, options, data) ->
  if err
    console.error "Error occurred"
    console.error(err)
  else
    if options.json
      console.log(JSON.stringify(data, null, 4))
    else
      if ! options.noheader
        console.log msg
        console.log ""

      if ! _.isArray(data)
        console.log data
      else
        data.forEach (element) ->
          console.log(element)



options = parser.parseArgs();

switch options.command
  when "login"
    linghub.login options.account, options.token, (err) ->
        resultPrinter(err, "Login successfuly. Your credentials are saved in ~/.ct-import.auth", options)

  when "logout"
    linghub.logout (err) ->
        resultPrinter(err, "Logged out successfuly", options)

  when "projects"
    linghub.projects options, (err, data) ->
      resultPrinter(err, "List of projects:", options, data)

  when "project-info"
    linghub.getProject options.project, options, (err, data) ->
      resultPrinter(err, "Detailed inforation about project #{options.project}:", options, data)

  when "locals"
    linghub.getProjectLocales options.project, options, (err, data) ->
      resultPrinter(err, "Locales for project #{options.project}:", options, data)

  when "download"
    linghub.getTranslationFile options.project, options.lang, options.path, options, (err, path) ->
      resultPrinter(err, "Translation saved to  #{path}:", options, path)

  when "upload"
    linghub.uploadSrcFile options.project, options.lang, options.path,  options, (err, path) ->
      resultPrinter(err, "Translation saved to  #{path}:", options, path)

  when "pull"
    linghub.pullAllTransaltions options.project, options.path,  options, (err, langs) ->
      resultPrinter(err, "Successfully pulled translations for project #{options.project}:", options, langs)

  when "push"
    linghub.pushAllFiles options.project, options.path,  options, (err, langs) ->
      resultPrinter(err, "Successfully pushed all local files to lingohub #{options.project}:", options, langs)

  else
    console.log("Unknown command #{options.command} ")

